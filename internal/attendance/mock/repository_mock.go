// Code generated by MockGen. DO NOT EDIT.
// Source: internal/attendance/repository.go
//
// Generated by this command:
//
//	mockgen -source internal/attendance/repository.go -destination internal/attendance/mock/repository_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	attendance "github.com/vnnyx/employee-management/internal/attendance"
	entity "github.com/vnnyx/employee-management/internal/attendance/entity"
	database "github.com/vnnyx/employee-management/pkg/database"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindAttendanceByPeriod mocks base method.
func (m *MockRepository) FindAttendanceByPeriod(ctx context.Context, startDate, endDate time.Time, opts ...entity.FindAttendanceOptions) (entity.FindAttendanceResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, startDate, endDate}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAttendanceByPeriod", varargs...)
	ret0, _ := ret[0].(entity.FindAttendanceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAttendanceByPeriod indicates an expected call of FindAttendanceByPeriod.
func (mr *MockRepositoryMockRecorder) FindAttendanceByPeriod(ctx, startDate, endDate any, opts ...any) *MockRepositoryFindAttendanceByPeriodCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, startDate, endDate}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAttendanceByPeriod", reflect.TypeOf((*MockRepository)(nil).FindAttendanceByPeriod), varargs...)
	return &MockRepositoryFindAttendanceByPeriodCall{Call: call}
}

// MockRepositoryFindAttendanceByPeriodCall wrap *gomock.Call
type MockRepositoryFindAttendanceByPeriodCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryFindAttendanceByPeriodCall) Return(arg0 entity.FindAttendanceResult, arg1 error) *MockRepositoryFindAttendanceByPeriodCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryFindAttendanceByPeriodCall) Do(f func(context.Context, time.Time, time.Time, ...entity.FindAttendanceOptions) (entity.FindAttendanceResult, error)) *MockRepositoryFindAttendanceByPeriodCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryFindAttendanceByPeriodCall) DoAndReturn(f func(context.Context, time.Time, time.Time, ...entity.FindAttendanceOptions) (entity.FindAttendanceResult, error)) *MockRepositoryFindAttendanceByPeriodCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindAttendancePeriodByPayrollID mocks base method.
func (m *MockRepository) FindAttendancePeriodByPayrollID(ctx context.Context, payrollID string) (*entity.AttendancePeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAttendancePeriodByPayrollID", ctx, payrollID)
	ret0, _ := ret[0].(*entity.AttendancePeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAttendancePeriodByPayrollID indicates an expected call of FindAttendancePeriodByPayrollID.
func (mr *MockRepositoryMockRecorder) FindAttendancePeriodByPayrollID(ctx, payrollID any) *MockRepositoryFindAttendancePeriodByPayrollIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAttendancePeriodByPayrollID", reflect.TypeOf((*MockRepository)(nil).FindAttendancePeriodByPayrollID), ctx, payrollID)
	return &MockRepositoryFindAttendancePeriodByPayrollIDCall{Call: call}
}

// MockRepositoryFindAttendancePeriodByPayrollIDCall wrap *gomock.Call
type MockRepositoryFindAttendancePeriodByPayrollIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryFindAttendancePeriodByPayrollIDCall) Return(arg0 *entity.AttendancePeriod, arg1 error) *MockRepositoryFindAttendancePeriodByPayrollIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryFindAttendancePeriodByPayrollIDCall) Do(f func(context.Context, string) (*entity.AttendancePeriod, error)) *MockRepositoryFindAttendancePeriodByPayrollIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryFindAttendancePeriodByPayrollIDCall) DoAndReturn(f func(context.Context, string) (*entity.AttendancePeriod, error)) *MockRepositoryFindAttendancePeriodByPayrollIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindPeriodByID mocks base method.
func (m *MockRepository) FindPeriodByID(ctx context.Context, periodID string) (*entity.AttendancePeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPeriodByID", ctx, periodID)
	ret0, _ := ret[0].(*entity.AttendancePeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPeriodByID indicates an expected call of FindPeriodByID.
func (mr *MockRepositoryMockRecorder) FindPeriodByID(ctx, periodID any) *MockRepositoryFindPeriodByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPeriodByID", reflect.TypeOf((*MockRepository)(nil).FindPeriodByID), ctx, periodID)
	return &MockRepositoryFindPeriodByIDCall{Call: call}
}

// MockRepositoryFindPeriodByIDCall wrap *gomock.Call
type MockRepositoryFindPeriodByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryFindPeriodByIDCall) Return(arg0 *entity.AttendancePeriod, arg1 error) *MockRepositoryFindPeriodByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryFindPeriodByIDCall) Do(f func(context.Context, string) (*entity.AttendancePeriod, error)) *MockRepositoryFindPeriodByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryFindPeriodByIDCall) DoAndReturn(f func(context.Context, string) (*entity.AttendancePeriod, error)) *MockRepositoryFindPeriodByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StoreNewAttendance mocks base method.
func (m *MockRepository) StoreNewAttendance(ctx context.Context, arg1 entity.Attendance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreNewAttendance", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreNewAttendance indicates an expected call of StoreNewAttendance.
func (mr *MockRepositoryMockRecorder) StoreNewAttendance(ctx, arg1 any) *MockRepositoryStoreNewAttendanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreNewAttendance", reflect.TypeOf((*MockRepository)(nil).StoreNewAttendance), ctx, arg1)
	return &MockRepositoryStoreNewAttendanceCall{Call: call}
}

// MockRepositoryStoreNewAttendanceCall wrap *gomock.Call
type MockRepositoryStoreNewAttendanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryStoreNewAttendanceCall) Return(arg0 error) *MockRepositoryStoreNewAttendanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryStoreNewAttendanceCall) Do(f func(context.Context, entity.Attendance) error) *MockRepositoryStoreNewAttendanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryStoreNewAttendanceCall) DoAndReturn(f func(context.Context, entity.Attendance) error) *MockRepositoryStoreNewAttendanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StoreNewAttendancePeriod mocks base method.
func (m *MockRepository) StoreNewAttendancePeriod(ctx context.Context, period entity.AttendancePeriod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreNewAttendancePeriod", ctx, period)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreNewAttendancePeriod indicates an expected call of StoreNewAttendancePeriod.
func (mr *MockRepositoryMockRecorder) StoreNewAttendancePeriod(ctx, period any) *MockRepositoryStoreNewAttendancePeriodCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreNewAttendancePeriod", reflect.TypeOf((*MockRepository)(nil).StoreNewAttendancePeriod), ctx, period)
	return &MockRepositoryStoreNewAttendancePeriodCall{Call: call}
}

// MockRepositoryStoreNewAttendancePeriodCall wrap *gomock.Call
type MockRepositoryStoreNewAttendancePeriodCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryStoreNewAttendancePeriodCall) Return(arg0 error) *MockRepositoryStoreNewAttendancePeriodCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryStoreNewAttendancePeriodCall) Do(f func(context.Context, entity.AttendancePeriod) error) *MockRepositoryStoreNewAttendancePeriodCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryStoreNewAttendancePeriodCall) DoAndReturn(f func(context.Context, entity.AttendancePeriod) error) *MockRepositoryStoreNewAttendancePeriodCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpsertAttendance mocks base method.
func (m *MockRepository) UpsertAttendance(ctx context.Context, arg1 entity.Attendance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAttendance", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertAttendance indicates an expected call of UpsertAttendance.
func (mr *MockRepositoryMockRecorder) UpsertAttendance(ctx, arg1 any) *MockRepositoryUpsertAttendanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAttendance", reflect.TypeOf((*MockRepository)(nil).UpsertAttendance), ctx, arg1)
	return &MockRepositoryUpsertAttendanceCall{Call: call}
}

// MockRepositoryUpsertAttendanceCall wrap *gomock.Call
type MockRepositoryUpsertAttendanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryUpsertAttendanceCall) Return(arg0 error) *MockRepositoryUpsertAttendanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryUpsertAttendanceCall) Do(f func(context.Context, entity.Attendance) error) *MockRepositoryUpsertAttendanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryUpsertAttendanceCall) DoAndReturn(f func(context.Context, entity.Attendance) error) *MockRepositoryUpsertAttendanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithTx mocks base method.
func (m *MockRepository) WithTx(tx database.DBTx) attendance.Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(attendance.Repository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockRepositoryMockRecorder) WithTx(tx any) *MockRepositoryWithTxCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockRepository)(nil).WithTx), tx)
	return &MockRepositoryWithTxCall{Call: call}
}

// MockRepositoryWithTxCall wrap *gomock.Call
type MockRepositoryWithTxCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryWithTxCall) Return(arg0 attendance.Repository) *MockRepositoryWithTxCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryWithTxCall) Do(f func(database.DBTx) attendance.Repository) *MockRepositoryWithTxCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryWithTxCall) DoAndReturn(f func(database.DBTx) attendance.Repository) *MockRepositoryWithTxCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
