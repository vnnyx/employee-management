// Code generated by MockGen. DO NOT EDIT.
// Source: internal/attendance/usecase.go
//
// Generated by this command:
//
//	mockgen -source internal/attendance/usecase.go -destination internal/attendance/mock/usecase_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/vnnyx/employee-management/internal/attendance/entity"
	entity0 "github.com/vnnyx/employee-management/internal/auth/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
	isgomock struct{}
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CreateAttendancePeriod mocks base method.
func (m *MockUseCase) CreateAttendancePeriod(ctx context.Context, authCredential entity0.Credential, payload entity.CreateAttendancePeriod) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttendancePeriod", ctx, authCredential, payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttendancePeriod indicates an expected call of CreateAttendancePeriod.
func (mr *MockUseCaseMockRecorder) CreateAttendancePeriod(ctx, authCredential, payload any) *MockUseCaseCreateAttendancePeriodCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttendancePeriod", reflect.TypeOf((*MockUseCase)(nil).CreateAttendancePeriod), ctx, authCredential, payload)
	return &MockUseCaseCreateAttendancePeriodCall{Call: call}
}

// MockUseCaseCreateAttendancePeriodCall wrap *gomock.Call
type MockUseCaseCreateAttendancePeriodCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUseCaseCreateAttendancePeriodCall) Return(arg0 string, arg1 error) *MockUseCaseCreateAttendancePeriodCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUseCaseCreateAttendancePeriodCall) Do(f func(context.Context, entity0.Credential, entity.CreateAttendancePeriod) (string, error)) *MockUseCaseCreateAttendancePeriodCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUseCaseCreateAttendancePeriodCall) DoAndReturn(f func(context.Context, entity0.Credential, entity.CreateAttendancePeriod) (string, error)) *MockUseCaseCreateAttendancePeriodCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SubmitAttendance mocks base method.
func (m *MockUseCase) SubmitAttendance(ctx context.Context, authCredential entity0.Credential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitAttendance", ctx, authCredential)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitAttendance indicates an expected call of SubmitAttendance.
func (mr *MockUseCaseMockRecorder) SubmitAttendance(ctx, authCredential any) *MockUseCaseSubmitAttendanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAttendance", reflect.TypeOf((*MockUseCase)(nil).SubmitAttendance), ctx, authCredential)
	return &MockUseCaseSubmitAttendanceCall{Call: call}
}

// MockUseCaseSubmitAttendanceCall wrap *gomock.Call
type MockUseCaseSubmitAttendanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUseCaseSubmitAttendanceCall) Return(arg0 error) *MockUseCaseSubmitAttendanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUseCaseSubmitAttendanceCall) Do(f func(context.Context, entity0.Credential) error) *MockUseCaseSubmitAttendanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUseCaseSubmitAttendanceCall) DoAndReturn(f func(context.Context, entity0.Credential) error) *MockUseCaseSubmitAttendanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
