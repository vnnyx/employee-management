// Code generated by MockGen. DO NOT EDIT.
// Source: internal/auditlog/repository.go
//
// Generated by this command:
//
//	mockgen -source internal/auditlog/repository.go -destination internal/auditlog/mock/repository_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	auditlog "github.com/vnnyx/employee-management/internal/auditlog"
	entity "github.com/vnnyx/employee-management/internal/auditlog/entity"
	database "github.com/vnnyx/employee-management/pkg/database"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// InsertNewAuditLog mocks base method.
func (m *MockRepository) InsertNewAuditLog(ctx context.Context, auditLog entity.AuditLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewAuditLog", ctx, auditLog)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNewAuditLog indicates an expected call of InsertNewAuditLog.
func (mr *MockRepositoryMockRecorder) InsertNewAuditLog(ctx, auditLog any) *MockRepositoryInsertNewAuditLogCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewAuditLog", reflect.TypeOf((*MockRepository)(nil).InsertNewAuditLog), ctx, auditLog)
	return &MockRepositoryInsertNewAuditLogCall{Call: call}
}

// MockRepositoryInsertNewAuditLogCall wrap *gomock.Call
type MockRepositoryInsertNewAuditLogCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryInsertNewAuditLogCall) Return(arg0 error) *MockRepositoryInsertNewAuditLogCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryInsertNewAuditLogCall) Do(f func(context.Context, entity.AuditLog) error) *MockRepositoryInsertNewAuditLogCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryInsertNewAuditLogCall) DoAndReturn(f func(context.Context, entity.AuditLog) error) *MockRepositoryInsertNewAuditLogCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithTx mocks base method.
func (m *MockRepository) WithTx(tx database.DBTx) auditlog.Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(auditlog.Repository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockRepositoryMockRecorder) WithTx(tx any) *MockRepositoryWithTxCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockRepository)(nil).WithTx), tx)
	return &MockRepositoryWithTxCall{Call: call}
}

// MockRepositoryWithTxCall wrap *gomock.Call
type MockRepositoryWithTxCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryWithTxCall) Return(arg0 auditlog.Repository) *MockRepositoryWithTxCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryWithTxCall) Do(f func(database.DBTx) auditlog.Repository) *MockRepositoryWithTxCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryWithTxCall) DoAndReturn(f func(database.DBTx) auditlog.Repository) *MockRepositoryWithTxCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
