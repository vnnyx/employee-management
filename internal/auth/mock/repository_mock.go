// Code generated by MockGen. DO NOT EDIT.
// Source: internal/auth/repository.go
//
// Generated by this command:
//
//	mockgen -source internal/auth/repository.go -destination internal/auth/mock/repository_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/vnnyx/employee-management/internal/users/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetUserByUsernamePassword mocks base method.
func (m *MockRepository) GetUserByUsernamePassword(ctx context.Context, username, password string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsernamePassword", ctx, username, password)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsernamePassword indicates an expected call of GetUserByUsernamePassword.
func (mr *MockRepositoryMockRecorder) GetUserByUsernamePassword(ctx, username, password any) *MockRepositoryGetUserByUsernamePasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsernamePassword", reflect.TypeOf((*MockRepository)(nil).GetUserByUsernamePassword), ctx, username, password)
	return &MockRepositoryGetUserByUsernamePasswordCall{Call: call}
}

// MockRepositoryGetUserByUsernamePasswordCall wrap *gomock.Call
type MockRepositoryGetUserByUsernamePasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryGetUserByUsernamePasswordCall) Return(arg0 *entity.User, arg1 error) *MockRepositoryGetUserByUsernamePasswordCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryGetUserByUsernamePasswordCall) Do(f func(context.Context, string, string) (*entity.User, error)) *MockRepositoryGetUserByUsernamePasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryGetUserByUsernamePasswordCall) DoAndReturn(f func(context.Context, string, string) (*entity.User, error)) *MockRepositoryGetUserByUsernamePasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
