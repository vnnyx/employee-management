// Code generated by MockGen. DO NOT EDIT.
// Source: internal/overtime/repository.go
//
// Generated by this command:
//
//	mockgen -source internal/overtime/repository.go -destination internal/overtime/mock/repository_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	overtime "github.com/vnnyx/employee-management/internal/overtime"
	entity "github.com/vnnyx/employee-management/internal/overtime/entity"
	database "github.com/vnnyx/employee-management/pkg/database"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindOvertimeByPeriod mocks base method.
func (m *MockRepository) FindOvertimeByPeriod(ctx context.Context, startDate, endDate time.Time, opts ...entity.FindOvertimeOptions) (entity.FindOvertimeResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, startDate, endDate}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOvertimeByPeriod", varargs...)
	ret0, _ := ret[0].(entity.FindOvertimeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOvertimeByPeriod indicates an expected call of FindOvertimeByPeriod.
func (mr *MockRepositoryMockRecorder) FindOvertimeByPeriod(ctx, startDate, endDate any, opts ...any) *MockRepositoryFindOvertimeByPeriodCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, startDate, endDate}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOvertimeByPeriod", reflect.TypeOf((*MockRepository)(nil).FindOvertimeByPeriod), varargs...)
	return &MockRepositoryFindOvertimeByPeriodCall{Call: call}
}

// MockRepositoryFindOvertimeByPeriodCall wrap *gomock.Call
type MockRepositoryFindOvertimeByPeriodCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryFindOvertimeByPeriodCall) Return(arg0 entity.FindOvertimeResult, arg1 error) *MockRepositoryFindOvertimeByPeriodCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryFindOvertimeByPeriodCall) Do(f func(context.Context, time.Time, time.Time, ...entity.FindOvertimeOptions) (entity.FindOvertimeResult, error)) *MockRepositoryFindOvertimeByPeriodCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryFindOvertimeByPeriodCall) DoAndReturn(f func(context.Context, time.Time, time.Time, ...entity.FindOvertimeOptions) (entity.FindOvertimeResult, error)) *MockRepositoryFindOvertimeByPeriodCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindOvertimeByUserIDDate mocks base method.
func (m *MockRepository) FindOvertimeByUserIDDate(ctx context.Context, userID string, date time.Time) (*entity.Overtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOvertimeByUserIDDate", ctx, userID, date)
	ret0, _ := ret[0].(*entity.Overtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOvertimeByUserIDDate indicates an expected call of FindOvertimeByUserIDDate.
func (mr *MockRepositoryMockRecorder) FindOvertimeByUserIDDate(ctx, userID, date any) *MockRepositoryFindOvertimeByUserIDDateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOvertimeByUserIDDate", reflect.TypeOf((*MockRepository)(nil).FindOvertimeByUserIDDate), ctx, userID, date)
	return &MockRepositoryFindOvertimeByUserIDDateCall{Call: call}
}

// MockRepositoryFindOvertimeByUserIDDateCall wrap *gomock.Call
type MockRepositoryFindOvertimeByUserIDDateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryFindOvertimeByUserIDDateCall) Return(arg0 *entity.Overtime, arg1 error) *MockRepositoryFindOvertimeByUserIDDateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryFindOvertimeByUserIDDateCall) Do(f func(context.Context, string, time.Time) (*entity.Overtime, error)) *MockRepositoryFindOvertimeByUserIDDateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryFindOvertimeByUserIDDateCall) DoAndReturn(f func(context.Context, string, time.Time) (*entity.Overtime, error)) *MockRepositoryFindOvertimeByUserIDDateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StoreNewOvertime mocks base method.
func (m *MockRepository) StoreNewOvertime(ctx context.Context, arg1 entity.Overtime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreNewOvertime", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreNewOvertime indicates an expected call of StoreNewOvertime.
func (mr *MockRepositoryMockRecorder) StoreNewOvertime(ctx, arg1 any) *MockRepositoryStoreNewOvertimeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreNewOvertime", reflect.TypeOf((*MockRepository)(nil).StoreNewOvertime), ctx, arg1)
	return &MockRepositoryStoreNewOvertimeCall{Call: call}
}

// MockRepositoryStoreNewOvertimeCall wrap *gomock.Call
type MockRepositoryStoreNewOvertimeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryStoreNewOvertimeCall) Return(arg0 error) *MockRepositoryStoreNewOvertimeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryStoreNewOvertimeCall) Do(f func(context.Context, entity.Overtime) error) *MockRepositoryStoreNewOvertimeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryStoreNewOvertimeCall) DoAndReturn(f func(context.Context, entity.Overtime) error) *MockRepositoryStoreNewOvertimeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpsertOvertime mocks base method.
func (m *MockRepository) UpsertOvertime(ctx context.Context, arg1 entity.Overtime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertOvertime", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertOvertime indicates an expected call of UpsertOvertime.
func (mr *MockRepositoryMockRecorder) UpsertOvertime(ctx, arg1 any) *MockRepositoryUpsertOvertimeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOvertime", reflect.TypeOf((*MockRepository)(nil).UpsertOvertime), ctx, arg1)
	return &MockRepositoryUpsertOvertimeCall{Call: call}
}

// MockRepositoryUpsertOvertimeCall wrap *gomock.Call
type MockRepositoryUpsertOvertimeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryUpsertOvertimeCall) Return(arg0 error) *MockRepositoryUpsertOvertimeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryUpsertOvertimeCall) Do(f func(context.Context, entity.Overtime) error) *MockRepositoryUpsertOvertimeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryUpsertOvertimeCall) DoAndReturn(f func(context.Context, entity.Overtime) error) *MockRepositoryUpsertOvertimeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithTx mocks base method.
func (m *MockRepository) WithTx(tx database.DBTx) overtime.Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(overtime.Repository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockRepositoryMockRecorder) WithTx(tx any) *MockRepositoryWithTxCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockRepository)(nil).WithTx), tx)
	return &MockRepositoryWithTxCall{Call: call}
}

// MockRepositoryWithTxCall wrap *gomock.Call
type MockRepositoryWithTxCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryWithTxCall) Return(arg0 overtime.Repository) *MockRepositoryWithTxCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryWithTxCall) Do(f func(database.DBTx) overtime.Repository) *MockRepositoryWithTxCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryWithTxCall) DoAndReturn(f func(database.DBTx) overtime.Repository) *MockRepositoryWithTxCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
