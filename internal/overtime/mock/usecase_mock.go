// Code generated by MockGen. DO NOT EDIT.
// Source: internal/overtime/usecase.go
//
// Generated by this command:
//
//	mockgen -source internal/overtime/usecase.go -destination internal/overtime/mock/usecase_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/vnnyx/employee-management/internal/auth/entity"
	entity0 "github.com/vnnyx/employee-management/internal/overtime/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
	isgomock struct{}
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// SubmitOvertime mocks base method.
func (m *MockUseCase) SubmitOvertime(ctx context.Context, authCredential entity.Credential, payload entity0.SubmitOvertime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitOvertime", ctx, authCredential, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitOvertime indicates an expected call of SubmitOvertime.
func (mr *MockUseCaseMockRecorder) SubmitOvertime(ctx, authCredential, payload any) *MockUseCaseSubmitOvertimeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitOvertime", reflect.TypeOf((*MockUseCase)(nil).SubmitOvertime), ctx, authCredential, payload)
	return &MockUseCaseSubmitOvertimeCall{Call: call}
}

// MockUseCaseSubmitOvertimeCall wrap *gomock.Call
type MockUseCaseSubmitOvertimeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUseCaseSubmitOvertimeCall) Return(arg0 error) *MockUseCaseSubmitOvertimeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUseCaseSubmitOvertimeCall) Do(f func(context.Context, entity.Credential, entity0.SubmitOvertime) error) *MockUseCaseSubmitOvertimeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUseCaseSubmitOvertimeCall) DoAndReturn(f func(context.Context, entity.Credential, entity0.SubmitOvertime) error) *MockUseCaseSubmitOvertimeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
