// Code generated by MockGen. DO NOT EDIT.
// Source: internal/payroll/usecase.go
//
// Generated by this command:
//
//	mockgen -source internal/payroll/usecase.go -destination internal/payroll/mock/usecase_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/vnnyx/employee-management/internal/auth/entity"
	entity0 "github.com/vnnyx/employee-management/internal/payroll/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
	isgomock struct{}
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GeneratePayroll mocks base method.
func (m *MockUseCase) GeneratePayroll(ctx context.Context, authCredential entity.Credential, periodID string) (entity0.GeneratedPayroll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePayroll", ctx, authCredential, periodID)
	ret0, _ := ret[0].(entity0.GeneratedPayroll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePayroll indicates an expected call of GeneratePayroll.
func (mr *MockUseCaseMockRecorder) GeneratePayroll(ctx, authCredential, periodID any) *MockUseCaseGeneratePayrollCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePayroll", reflect.TypeOf((*MockUseCase)(nil).GeneratePayroll), ctx, authCredential, periodID)
	return &MockUseCaseGeneratePayrollCall{Call: call}
}

// MockUseCaseGeneratePayrollCall wrap *gomock.Call
type MockUseCaseGeneratePayrollCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUseCaseGeneratePayrollCall) Return(arg0 entity0.GeneratedPayroll, arg1 error) *MockUseCaseGeneratePayrollCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUseCaseGeneratePayrollCall) Do(f func(context.Context, entity.Credential, string) (entity0.GeneratedPayroll, error)) *MockUseCaseGeneratePayrollCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUseCaseGeneratePayrollCall) DoAndReturn(f func(context.Context, entity.Credential, string) (entity0.GeneratedPayroll, error)) *MockUseCaseGeneratePayrollCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListPayslips mocks base method.
func (m *MockUseCase) ListPayslips(ctx context.Context, authCredential entity.Credential, payrollID string) (entity0.ListPayslips, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPayslips", ctx, authCredential, payrollID)
	ret0, _ := ret[0].(entity0.ListPayslips)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPayslips indicates an expected call of ListPayslips.
func (mr *MockUseCaseMockRecorder) ListPayslips(ctx, authCredential, payrollID any) *MockUseCaseListPayslipsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPayslips", reflect.TypeOf((*MockUseCase)(nil).ListPayslips), ctx, authCredential, payrollID)
	return &MockUseCaseListPayslipsCall{Call: call}
}

// MockUseCaseListPayslipsCall wrap *gomock.Call
type MockUseCaseListPayslipsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUseCaseListPayslipsCall) Return(arg0 entity0.ListPayslips, arg1 error) *MockUseCaseListPayslipsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUseCaseListPayslipsCall) Do(f func(context.Context, entity.Credential, string) (entity0.ListPayslips, error)) *MockUseCaseListPayslipsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUseCaseListPayslipsCall) DoAndReturn(f func(context.Context, entity.Credential, string) (entity0.ListPayslips, error)) *MockUseCaseListPayslipsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ShowPayslip mocks base method.
func (m *MockUseCase) ShowPayslip(ctx context.Context, authCredential entity.Credential, payrollID string) (*entity0.PayslipData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowPayslip", ctx, authCredential, payrollID)
	ret0, _ := ret[0].(*entity0.PayslipData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowPayslip indicates an expected call of ShowPayslip.
func (mr *MockUseCaseMockRecorder) ShowPayslip(ctx, authCredential, payrollID any) *MockUseCaseShowPayslipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowPayslip", reflect.TypeOf((*MockUseCase)(nil).ShowPayslip), ctx, authCredential, payrollID)
	return &MockUseCaseShowPayslipCall{Call: call}
}

// MockUseCaseShowPayslipCall wrap *gomock.Call
type MockUseCaseShowPayslipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUseCaseShowPayslipCall) Return(arg0 *entity0.PayslipData, arg1 error) *MockUseCaseShowPayslipCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUseCaseShowPayslipCall) Do(f func(context.Context, entity.Credential, string) (*entity0.PayslipData, error)) *MockUseCaseShowPayslipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUseCaseShowPayslipCall) DoAndReturn(f func(context.Context, entity.Credential, string) (*entity0.PayslipData, error)) *MockUseCaseShowPayslipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
